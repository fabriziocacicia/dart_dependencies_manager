name: Check for Template new Release
on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * SUN' # Runs every Sunday at 12:00

jobs:
  check-for-template-new-release:
    if: ${{ vars.TEMPLATE_REPO }}
    runs-on: ubuntu-latest
    outputs:
      TEMPLATE_LATEST_RELEASE: ${{ steps.latest_release_name.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Latest Template Release
        uses: octokit/request-action@v2.1.7
        id: get_latest_release
        with:
          route: GET /repos/${{ vars.TEMPLATE_REPO }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Extract Latest Template Release name
        id: latest_release_name
        shell: bash
        run: echo "value=${{ fromJSON(steps.get_latest_release.outputs.data).name }}" >> $GITHUB_OUTPUT
      - name: Compare latest template Release with last release update
        id: compare_versions
        uses: fabriziocacicia/semver-compare-action@v0.1.0-draft
        with:
          first: '${{ steps.latest_release_name.outputs.value }}'
          second: '${{ vars.UPDATED_TO_TEMPLATE_RELEASE }}'
          operator: '>'
      - name: Cancel Workflow if no new Release
        uses: potiuk/cancel-workflow-runs@v4_7
        if: ${{ !fromJSON(steps.compare_versions.outputs.result) }}
        with:
          cancelMode: self
          selfPreservation: false
          token: ${{ secrets.GITHUB_TOKEN }}
  push_changes:
    runs-on: ubuntu-latest
    needs: check-for-template-new-release
    if: needs.check-for-template-new-release.result == 'success'
    outputs:
      BRANCH_NAME: ${{ env.BRANCH_NAME }}
    env:
      TEMPLATE_URL: https://github.com/${{ vars.TEMPLATE_REPO }}.git
      TEMPLATE_LATEST_RELEASE: ${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }}
      BRANCH_NAME: chore/merge_${{ vars.TEMPLATE_REPO }}_${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }}
    steps:
      - uses: actions/checkout@v3
        with:
            token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - shell: bash
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git remote add template ${{ env.TEMPLATE_URL }}
          git fetch template
          git checkout ${{ env.TEMPLATE_LATEST_RELEASE }}
          git switch -c ${{ env.BRANCH_NAME }}
          git push origin ${{ env.BRANCH_NAME }} -f
  create_pr:
    runs-on: ubuntu-latest
    needs: [check-for-template-new-release, push_changes]
    if: needs.push_changes.result == 'success'
    env:
      ASSIGNEE: ${{ github.repository_owner }}
      BRANCH_NAME: ${{ needs.push_changes.outputs.BRANCH_NAME }}
      TITLE: "chore: merge ${{ vars.TEMPLATE_REPO }} ${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }} changes"
      TEMPLATE_LATEST_RELEASE: ${{ needs.check-for-template-new-release.outputs.TEMPLATE_LATEST_RELEASE }}
    steps:
      - uses: actions/checkout@v3
        with:
            token: ${{ github.token }}
      - shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create --assignee ${{ env.ASSIGNEE }} --base main --head ${{ env.BRANCH_NAME }} --title "${{ env.TITLE }}" --body '
          This PR will merge the changes from the `${{ env.TEMPLATE_LATEST_RELEASE }}` version of the `${{ vars.TEMPLATE_REPO }}` template.
          '
  cleanup-if-failure:
    runs-on: ubuntu-latest
    needs: create_pr
    if: needs.create_pr.result == 'failure' || needs.create_pr.result == 'skipped'
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Remove branch
        shell: bash
        run: git push origin -d ${{ env.BRANCH_NAME }}
